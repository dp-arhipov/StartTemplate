//@import 'node_modules/bootstrap/scss/bootstrap-reboot.scss'; // Bootstrap Reboot collection
//@import 'node_modules/bootstrap/scss/mixins/_breakpoints.scss'; // Bootstrap Breakpoints mixin
//@import 'node_modules/bootstrap/scss/bootstrap-grid.scss'; // Optional Bootstrap Grid
//@import 'node_modules/bootstrap/scss/utilities/_sizing.scss'; // Optional Bootstrap Utilites
@import "node_modules/hamburgers/_sass/hamburgers/hamburgers.scss";
////site vars section

$grid-breakpoints: (
        xs: 370px,
        sm: 480px,
        md: 768px,
        lg: 992px,
        xl: 1180px
);
$font-styles: (
        html:(
                line-height: 1.6,
                font-family: ('Ubuntu', sans-serif)
        ),
        h1:(
                font-size: 57px,
                line-height: 1.2
        ),
        p3:(
                font-size: 14px,
                line-height: 22px
        ),
  //mods
        -bold: (
                font-weight: bold
        ),
        -normal: (
                font-weight: normal
        ),
        -thin: (
                font-weight: 300
        ),
);

$colors: (
        black: #000000,
        blue: #5528FF,
        grey: #898989
);


$max-content-width: 1380px;
$min-content-width: 320px;
$max-font-size: 38px;
$min-font-size: 16px;

$content-padding: 16px;
$rem: $max-font-size;

$c-main:getColor(black);
$c-accent:getColor(blue);
$c-second:getColor(grey);



//отладка
@mixin showChildBorders {
  & > * {
    outline: 1px solid deeppink;
  }
  & > * > * {
    outline: 1px dashed #4aa88b;
    outline-offset: -1px;
  }
  & > * > * > * {
    outline: 1px dotted dodgerblue;
    outline-offset: -1px;
  }
  & > * > * > * > * {
    outline: 1px dotted #961eff;
    outline-offset: -1px;
  }
}


//сброс
@mixin reset($choise) { //сброс нужных элементов
	@if $choise == last-margin-right { //lastRightMargin
		&:last-child {
			margin-right: 0;
		}
	}

	@if $choise == last-margin-bottom { //lastBottomMargin
		&:last-child {
			margin-bottom: 0;
		}
	}

	@if $choise == all { //css reset
		& * {
			//transition: 0.1s ease;
			margin: 0;
			padding: 0;
			box-sizing: border-box;
			font-size: inherit;
		}
		a, a:hover {
			//display: inline-block;
			color: inherit;
			text-decoration: none;
		}
		button {
			outline: none;
			//font-size: inherit;
		}
		ul {
			list-style-type: none;
		}
		input:focus {
			outline: none;
		}

	}
}


//вспомогательные
@function rem($value, $rem:$rem) {

	@if type-of($value) == "number" and (unit($value) == "rem" or unit($value) == "em" or unitless($value)) {
		@return $value;
	} @else {
		@return strip-unit($value) / strip-unit($rem) * 1rem;
	}

}

@function strip-unit($number) {
	@if type-of($number) == 'number' and not unitless($number) {
		@return $number / ($number * 0 + 1);
	}
	@return $number;
}

//геттеры из sass-map
@function getColor($color, $colors-map: $colors) {
	@return map-get($colors-map, $color);
}

@function getBp($key,$bp-map: $grid-breakpoints) {
	@if map-has-key($bp-map, $key) {
		@return map-get($bp-map, $key);
	} @else {
	}
	@return $key;
}

@function getFontStyle($tag, $rule, $fstyle-map: $font-styles) {
	$tag-styles: map-get($fstyle-map, $tag);
	@if $tag-styles {
		@return map-get($tag-styles, $rule);
	} @else {
		@return null
	}

}


//работа с цветом
@function tint($color, $percentage) {
	@return mix(white, $color, $percentage);
}

@function shade($color, $percentage) {
	@return mix(black, $color, $percentage);
}



//медиа
@mixin mq($breakpointName) {
  @media screen and (max-width: #{getBp($breakpointName)}) {
    @content;
  }
}


//блоки
@mixin paddingContainer($max-w: $max-content-width, $paddingLR: $content-padding, $paddingInner:null, $paddingTB:null) { //ширина контента, отступ, отступ внутри блока контента, отступ сверху и снизу

  @if $paddingTB!=null {

    padding-top: $paddingTB;
    padding-bottom: $paddingTB;
  }

  @if $paddingInner!=null {

    padding-right: calc(50vw - #{$max-w } / 2 + #{$paddingInner});
    padding-left: calc(50vw - #{$max-w} / 2 + #{$paddingInner});

    @media (max-width: $max-w + $paddingLR * 2) {
      padding-right: rem($paddingLR + $paddingInner);
      padding-left: rem($paddingLR + $paddingInner);
    }

  } @else {

    padding-right: calc(50vw - #{$max-w } / 2);
    padding-left: calc(50vw - #{$max-w} / 2);

    @media (max-width: $max-w + $paddingLR * 2) {
      padding-right: rem($paddingLR);
      padding-left: rem($paddingLR);
    }
  }
}

//для контейнеров, margin-bottom
@mixin mb($value) {
  > * {
    margin-bottom: $value;
  }
  >:last-child {
    margin-bottom: 0;
  }
}

////font section

//адаптивный шрифт
@mixin setFluidFontSize($f-min:$min-font-size, $f-max:$max-font-size, $w-min:$min-content-width, $w-max:$max-content-width) {
  font-size: $f-min;

  @media (min-width: $w-min) {
    $k: ($f-max - $f-min)/($w-max - $w-min);
    $b: $f-min - $k * $w-min;
    font-size: calc(#{$k} * 100vw + #{$b});
  }

  @media (min-width: $w-max) {
    font-size: $f-max;
  }
}


//установка стилей из $font-styles
@mixin setFontStyles($tag,$mods...) {

  $font-family: getFontStyle($tag, font-family);
  @if $font-family {
    font-family: $font-family;
  }

  $font-size: getFontStyle($tag, font-size);
  @if $font-size {
    font-size: rem($font-size);
  }

  $line-height: getFontStyle($tag, line-height);
  @if $line-height {
    line-height: rem($line-height);
  }

  $letter-spacing: getFontStyle($tag, letter-spacing);
  @if $letter-spacing {
    letter-spacing: rem($letter-spacing);
  }

  $font-weight: getFontStyle($tag, font-weight);
  @if $font-weight {
    font-weight: $font-weight;
  }

  $color: getFontStyle($tag, color);
  @if $color {
    color: $color;
  }

  $text-transform: getFontStyle($tag, text-transform);
  @if $text-transform {
    text-transform: $text-transform;
  }

  @each $mod in $mods {
    @include setFontStyles("-"+$mod);
  }

}

@mixin font($fname, $fstyle, $fweight, $furl) {
  @font-face {
    font-family: $fname;
    font-style: $fstyle;
    font-weight: $fweight;
    // font-display: swap; // Uncomment to initially display system fonts
    src: local($fname), url($furl) format('woff2');
  }
}

//@include font('Roboto', normal, 400, '../fonts/roboto-regular-webfont.woff2');
//@include font('Roboto', italic, 400, '../fonts/roboto-italic-webfont.woff2');
//@include font('Roboto', normal, 700, '../fonts/roboto-bold-webfont.woff2');
//@include font('Roboto', italic, 700, '../fonts/roboto-bolditalic-webfont.woff2');






